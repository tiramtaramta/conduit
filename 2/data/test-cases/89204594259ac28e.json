{
  "uid" : "89204594259ac28e",
  "name" : "test_registration",
  "fullName" : "docs.testcases.test_registration#test_registration",
  "historyId" : "2c5ea982fc2d05e3d2996f4b22aa9cad",
  "time" : {
    "start" : 1628077468151,
    "stop" : 1628077480931,
    "duration" : 12780
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert '' == 'Your registr...s successful!'\n  - Your registration was successful!",
  "statusTrace" : "def test_registration():\n        browser_options = Options()\n        browser_options.headless = True\n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=browser_options)\n        driver.maximize_window()\n    \n        try:\n            driver.get(\"http://localhost:1667/#/\")\n    \n            time.sleep(2)\n    \n            def registration_process():\n                random_user_name = \"user\" + str(random.randint(202, 1000))\n    \n                user_input_data = [random_user_name, f\"{random_user_name}@hotmail.com\", \"Userpass1\"]\n    \n                driver.find_element_by_xpath(\"//a[@href='#/register']\").click()\n    \n                # Beviteli mezők feltöltése a random user adatokkal\n                for i in range(len(user_input_data)):\n                    driver.find_element_by_xpath(f\"//fieldset[{i + 1}]/input\").send_keys(user_input_data[i])\n                driver.find_element_by_tag_name(\"button\").click()\n    \n                time.sleep(2)\n    \n                # Sikeres regisztrációs értesítési ablak szövegének ellenőrzése\n                assert driver.find_element_by_class_name(\"swal-text\").text == \"Your registration was successful!\"\n    \n                time.sleep(2)\n    \n                # Értesítési ablak bezárása\n                driver.find_element_by_xpath(\"//button[normalize-space()='OK']\").click()\n    \n                time.sleep(1)\n    \n                # Bejelentkezés tényének ellenőrzése\n                username_check = driver.find_element_by_xpath(\"//a[starts-with(@href, '#/@')]\").text\n                assert username_check == user_input_data[\n                    0], f\"Test Failed: Username did not match expected ({user_input_data[0]}).\"\n    \n                # A létrehozott felhasználó nevének kimentése a későbbi belépésekhez\n                with open('registered_users.csv', 'a', encoding=\"utf-8\") as csv_users:\n                    csv_users.write(random_user_name + \";\")\n    \n                time.sleep(2)\n    \n>           registration_process()\n\ndocs/testcases/test_registration.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def registration_process():\n        random_user_name = \"user\" + str(random.randint(202, 1000))\n    \n        user_input_data = [random_user_name, f\"{random_user_name}@hotmail.com\", \"Userpass1\"]\n    \n        driver.find_element_by_xpath(\"//a[@href='#/register']\").click()\n    \n        # Beviteli mezők feltöltése a random user adatokkal\n        for i in range(len(user_input_data)):\n            driver.find_element_by_xpath(f\"//fieldset[{i + 1}]/input\").send_keys(user_input_data[i])\n        driver.find_element_by_tag_name(\"button\").click()\n    \n        time.sleep(2)\n    \n        # Sikeres regisztrációs értesítési ablak szövegének ellenőrzése\n>       assert driver.find_element_by_class_name(\"swal-text\").text == \"Your registration was successful!\"\nE       AssertionError: assert '' == 'Your registr...s successful!'\nE         - Your registration was successful!\n\ndocs/testcases/test_registration.py:36: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert '' == 'Your registr...s successful!'\n  - Your registration was successful!",
    "statusTrace" : "def test_registration():\n        browser_options = Options()\n        browser_options.headless = True\n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=browser_options)\n        driver.maximize_window()\n    \n        try:\n            driver.get(\"http://localhost:1667/#/\")\n    \n            time.sleep(2)\n    \n            def registration_process():\n                random_user_name = \"user\" + str(random.randint(202, 1000))\n    \n                user_input_data = [random_user_name, f\"{random_user_name}@hotmail.com\", \"Userpass1\"]\n    \n                driver.find_element_by_xpath(\"//a[@href='#/register']\").click()\n    \n                # Beviteli mezők feltöltése a random user adatokkal\n                for i in range(len(user_input_data)):\n                    driver.find_element_by_xpath(f\"//fieldset[{i + 1}]/input\").send_keys(user_input_data[i])\n                driver.find_element_by_tag_name(\"button\").click()\n    \n                time.sleep(2)\n    \n                # Sikeres regisztrációs értesítési ablak szövegének ellenőrzése\n                assert driver.find_element_by_class_name(\"swal-text\").text == \"Your registration was successful!\"\n    \n                time.sleep(2)\n    \n                # Értesítési ablak bezárása\n                driver.find_element_by_xpath(\"//button[normalize-space()='OK']\").click()\n    \n                time.sleep(1)\n    \n                # Bejelentkezés tényének ellenőrzése\n                username_check = driver.find_element_by_xpath(\"//a[starts-with(@href, '#/@')]\").text\n                assert username_check == user_input_data[\n                    0], f\"Test Failed: Username did not match expected ({user_input_data[0]}).\"\n    \n                # A létrehozott felhasználó nevének kimentése a későbbi belépésekhez\n                with open('registered_users.csv', 'a', encoding=\"utf-8\") as csv_users:\n                    csv_users.write(random_user_name + \";\")\n    \n                time.sleep(2)\n    \n>           registration_process()\n\ndocs/testcases/test_registration.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def registration_process():\n        random_user_name = \"user\" + str(random.randint(202, 1000))\n    \n        user_input_data = [random_user_name, f\"{random_user_name}@hotmail.com\", \"Userpass1\"]\n    \n        driver.find_element_by_xpath(\"//a[@href='#/register']\").click()\n    \n        # Beviteli mezők feltöltése a random user adatokkal\n        for i in range(len(user_input_data)):\n            driver.find_element_by_xpath(f\"//fieldset[{i + 1}]/input\").send_keys(user_input_data[i])\n        driver.find_element_by_tag_name(\"button\").click()\n    \n        time.sleep(2)\n    \n        # Sikeres regisztrációs értesítési ablak szövegének ellenőrzése\n>       assert driver.find_element_by_class_name(\"swal-text\").text == \"Your registration was successful!\"\nE       AssertionError: assert '' == 'Your registr...s successful!'\nE         - Your registration was successful!\n\ndocs/testcases/test_registration.py:36: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b69be9b758f82b9e",
      "name" : "log",
      "source" : "b69be9b758f82b9e.txt",
      "type" : "text/plain",
      "size" : 642
    }, {
      "uid" : "5fe802f3fd2c29ad",
      "name" : "stderr",
      "source" : "5fe802f3fd2c29ad.txt",
      "type" : "text/plain",
      "size" : 435
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "docs.testcases"
  }, {
    "name" : "suite",
    "value" : "test_registration"
  }, {
    "name" : "host",
    "value" : "fv-az81-563"
  }, {
    "name" : "thread",
    "value" : "3711-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "docs.testcases.test_registration"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "89204594259ac28e.json",
  "parameterValues" : [ ]
}