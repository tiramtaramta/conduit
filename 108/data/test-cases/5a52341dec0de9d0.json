{
  "uid" : "5a52341dec0de9d0",
  "name" : "test_create_posts_process",
  "fullName" : "docs.testcases.test_all_in_one2.TestConduit#test_create_posts_process",
  "historyId" : "24f224a382a53321a66921c76f3fec9e",
  "time" : {
    "start" : 1628262357874,
    "stop" : 1628262373499,
    "duration" : 15625
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <test_all_in_one2.TestConduit object at 0x7f7b8ca4cc40>\n\n    def test_create_posts_process(self):\n        basic_login(self.driver)\n    \n        for i in range(1):\n            with open('contents.csv') as article_file:\n                csv_reader = csv.reader(article_file, delimiter=';')\n                for row in csv_reader:\n                    new_article_data = row\n    \n                    # Beviteli űrlap feltöltése\n>                   article = find_element(self.driver, By.XPATH, \"//input[starts-with(@placeholder,'Article')]\")\n\ndocs/testcases/test_all_in_one2.py:201: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ndocs/testcases/basic_function.py:7: in find_element\n    element = WebDriverWait(driver, 10).until(EC.visibility_of_element_located((search_type, value)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e71b9dba8c6c10bc7ded84951c7fe212\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x7f7b8ca199d0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <test_all_in_one2.TestConduit object at 0x7f7b8ca4cc40>\n\n    def test_create_posts_process(self):\n        basic_login(self.driver)\n    \n        for i in range(1):\n            with open('contents.csv') as article_file:\n                csv_reader = csv.reader(article_file, delimiter=';')\n                for row in csv_reader:\n                    new_article_data = row\n    \n                    # Beviteli űrlap feltöltése\n>                   article = find_element(self.driver, By.XPATH, \"//input[starts-with(@placeholder,'Article')]\")\n\ndocs/testcases/test_all_in_one2.py:201: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ndocs/testcases/basic_function.py:7: in find_element\n    element = WebDriverWait(driver, 10).until(EC.visibility_of_element_located((search_type, value)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e71b9dba8c6c10bc7ded84951c7fe212\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x7f7b8ca199d0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6a96a15a61874398",
      "name" : "log",
      "source" : "6a96a15a61874398.txt",
      "type" : "text/plain",
      "size" : 344
    }, {
      "uid" : "236d8f73034b6cc0",
      "name" : "stderr",
      "source" : "236d8f73034b6cc0.txt",
      "type" : "text/plain",
      "size" : 215
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "docs.testcases"
  }, {
    "name" : "suite",
    "value" : "test_all_in_one2"
  }, {
    "name" : "subSuite",
    "value" : "TestConduit"
  }, {
    "name" : "host",
    "value" : "fv-az81-527"
  }, {
    "name" : "thread",
    "value" : "3784-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "docs.testcases.test_all_in_one2"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "5a52341dec0de9d0.json",
  "parameterValues" : [ ]
}