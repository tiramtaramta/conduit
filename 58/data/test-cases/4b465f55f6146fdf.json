{
  "uid" : "4b465f55f6146fdf",
  "name" : "test_login",
  "fullName" : "docs.testcases.test_login#test_login",
  "historyId" : "3b63c183167f46b5730a46d06556452c",
  "time" : {
    "start" : 1628108587512,
    "stop" : 1628108604916,
    "duration" : 17404
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "def test_login():\n        browser_options = Options()\n        browser_options.headless = True\n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=browser_options)\n        driver.get(\"http://localhost:1667/#/\")\n    \n        time.sleep(2)\n    \n    \n        driver.find_element_by_xpath(\"//a[@href='#/login']\").click()\n    \n        # Automata regisztrációval létrejött felhasználók beolvasása\n        with open('docs/testcases/registered_users.csv') as users_file:\n            csv_reader = csv.reader(users_file, delimiter=';')\n            for row in csv_reader:\n                users_list = row\n    \n        # Random felhasználó kiválasztása a bejelentkezéshez\n        random_user_index = random.randint(0, len(users_list) - 1)\n        random_user_name = users_list[random_user_index]\n    #     user_input_data = [random_user_name, f\"{random_user_name}@hotmail.com\", \"Userpass1\"]\n        user_input_data = [\"user200\", \"user200@hotmail.com\", \"Userpass1\"]\n    \n        # Bejelentkezési űrlap feltöltése\n        for i in range(len(user_input_data) - 1):\n            driver.find_element_by_xpath(f\"//fieldset[{i + 1}]/input\").send_keys(user_input_data[i + 1])\n    \n        time.sleep(1)\n    \n        driver.find_element_by_tag_name(\"button\").click()\n    \n        time.sleep(2)\n    \n        # Bejelentkezés tényének ellenőrzése\n>       username_check = find_element(driver, By.XPATH, \"//a[@class='nav-link'] AND [starts-with(@href, '#/@')]\")\n\ndocs/testcases/test_login.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ndocs/testcases/basic_function.py:8: in find_element\n    element = WebDriverWait(driver, 10).until(EC.visibility_of_element_located((search_type, value)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3303ad32e1df0de68843d93b2419abcb\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x7fbfa4c9b730>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "def test_login():\n        browser_options = Options()\n        browser_options.headless = True\n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=browser_options)\n        driver.get(\"http://localhost:1667/#/\")\n    \n        time.sleep(2)\n    \n    \n        driver.find_element_by_xpath(\"//a[@href='#/login']\").click()\n    \n        # Automata regisztrációval létrejött felhasználók beolvasása\n        with open('docs/testcases/registered_users.csv') as users_file:\n            csv_reader = csv.reader(users_file, delimiter=';')\n            for row in csv_reader:\n                users_list = row\n    \n        # Random felhasználó kiválasztása a bejelentkezéshez\n        random_user_index = random.randint(0, len(users_list) - 1)\n        random_user_name = users_list[random_user_index]\n    #     user_input_data = [random_user_name, f\"{random_user_name}@hotmail.com\", \"Userpass1\"]\n        user_input_data = [\"user200\", \"user200@hotmail.com\", \"Userpass1\"]\n    \n        # Bejelentkezési űrlap feltöltése\n        for i in range(len(user_input_data) - 1):\n            driver.find_element_by_xpath(f\"//fieldset[{i + 1}]/input\").send_keys(user_input_data[i + 1])\n    \n        time.sleep(1)\n    \n        driver.find_element_by_tag_name(\"button\").click()\n    \n        time.sleep(2)\n    \n        # Bejelentkezés tényének ellenőrzése\n>       username_check = find_element(driver, By.XPATH, \"//a[@class='nav-link'] AND [starts-with(@href, '#/@')]\")\n\ndocs/testcases/test_login.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ndocs/testcases/basic_function.py:8: in find_element\n    element = WebDriverWait(driver, 10).until(EC.visibility_of_element_located((search_type, value)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3303ad32e1df0de68843d93b2419abcb\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x7fbfa4c9b730>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8c65bb7c53bfee53",
      "name" : "log",
      "source" : "8c65bb7c53bfee53.txt",
      "type" : "text/plain",
      "size" : 344
    }, {
      "uid" : "2950ff4178e2729f",
      "name" : "stderr",
      "source" : "2950ff4178e2729f.txt",
      "type" : "text/plain",
      "size" : 215
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "docs.testcases"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "host",
    "value" : "fv-az81-527"
  }, {
    "name" : "thread",
    "value" : "3687-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "docs.testcases.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "4b465f55f6146fdf.json",
  "parameterValues" : [ ]
}